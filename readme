Assignment 4 readme File

------------------------------------------------------------------------
Student 1: What is your name?

Alex Baroody

------------------------------------------------------------------------
Student 2: What is your name?

Austen Mazenko

------------------------------------------------------------------------
Student 1: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page to this section of the
readme file, and edit it as appropriate.

The course's lectures.

The course's precepts.

The course's website.

The man pages on the armlab cluster.

The course's current staff members outside of class time through Ed.

------------------------------------------------------------------------
Student 2: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page to this section of the
readme file, and edit it as appropriate.

The course's lectures.

The course's precepts.

The course's website.

The man pages on the armlab cluster.

The course's current staff members outside of class time through Ed.

------------------------------------------------------------------------
Student 1: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.

None.

------------------------------------------------------------------------
Student 2: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.

None.

------------------------------------------------------------------------
Student 1: What is your assessment of the assignment? Was it helpful?
Was it fun?

It was stressful! It was fun to learn how trees worked, but I think it
could have been presented in a little better way. The assingment may
get better overthe years with feedback, however.

------------------------------------------------------------------------
Student 2: What is your assessment of the assignment? Was it helpful?
Was it fun?

The idea behind the assignment was actually very interesting, it was
cool to see how trees work and approach a few different implementations
from the binary directory tree to the file tree. That said, there were
a few confusing parts as far as the precise wording of questions in
parts 1 and 2 as well as inconsistencies in comments within the
provided .h files. With these kinks worked out, however, I certainly
think this is a keeper assignment for future years.

------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?



------------------------------------------------------------------------
What warnings does critTer generate on checker.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

None.

------------------------------------------------------------------------
What warnings does critTer generate on your Part 3 code, and what are
your disagreements with them? Copy the critTer warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

   ft.c: line 44: medium priority:
      Do you want to validate 'contents' through an assert?
As we do not own the pointer to the file contents, we shouldn't be able
to validate it. The client should handle that.

   ft.c: line 249: medium priority:
      Do you want to validate 'contents' through an assert?
See above.

   node.c: line 223: medium priority:
      Do you want to validate 'childID' through an assert?
See above.

   ft.c: line 336: medium priority:
      Do you want to validate 'newContents' through an assert?
See above.

------------------------------------------------------------------------
What warnings does splint generate for Part 2's checker, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

None.

------------------------------------------------------------------------
What warnings does splint generate on Part 3, and what are your
disagreements with them? Copy the splint warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

Function exported but not used outside node: Node_compare
  A declaration is exported, but not used outside this module. Declaration can
    use static qualifier. (Use -exportlocal to inhibit warning)
       node.c:176:1: Definition of Node_compare

while the ft_client never uses Node_compare (so it is only ever used in
the Node module), comparing two Nodes is a useful function to be able to
access. Therefore, it shouldn't be static.

------------------------------------------------------------------------
For each of the first three faulty BDT implementations required by Step
1.5, identify the function where there is a bug. You do not have to
identify the bug itself, only its location, but note that this must be
the location of the underlying error, which is not necessarily where
the error manifests itself or is "noticed" by the client.


      Executable         Function with the underlying error
===============================================================
         ./bdtBad1        BDT_insertPath
---------------------------------------------------------------
         ./bdtBad2        BDT_newNode
---------------------------------------------------------------
         ./bdtBad3        BDT_unlinkParentToChild
===============================================================

For bdtBad4, you do not have to find the bug. Instead, indicate what
is different about trying to debug this executable in gdb versus the
other three:

The difference is that there isn't an error in the way the BDT is
created or handled, but instead the way the BDT is printed to a string.
This executable provides the correct information, unlike the first 3,
but makes a mistake in the way that it represents the BDT in a string.

For bdtBad5, you do not have to find the bug. Instead, indicate one
hypothesis for how the program could crash within the DynArray module,
which we promise is itself correct:

The problem is that the DynArray_map function calls BDT_strlenAccumulate
with a buggy node. The problem here isn't in the DynArray
representation, but rather in the information that the BDT has stored in
the DynArray. The program crashes in the DynArray because the data it
has stored is faulty, and the BDT method it calls when it is mapping
catches this fault. However, as far as the error system is concerned,
the bug appeared in DynArray_map.


------------------------------------------------------------------------
What are your critiques of the given DT implementations, as
specified in Step 2.5?

The first thing we noticed was that Node_linkChild, Node_unlinkChild,
and Node_addChild seem to have functionality that is more suited to the
DT module.

Second, we noticed that DT_traversePathFrom could be made more efficient
if we accept the invariant that all of the children are in sorted order.
As is, this function traverses the entire tree in search of the path,
rather than systematically searching for the path.

Third, we noticed that DT_insertRestOfPath has the macro
"PARENT_CHILD_ERROR" listed in it's comment, but never returns it in the
function. This might just be an oversight, but changing either the
comment or the function would improve readability.

Fourth, we noticed that DT_traversePath is completely auxiliary and
doesn't really add anything as a static method could. The only apparent
functionality is executing an assert statement before passing into
DT_traversePathFrom, yet this assert is already included in that latter
function so there is no net benefit. Similarly, DT_removePathFrom is
not quite necessary either, but by at least executing the destroy
method in Node it at least affects the program in some way.

------------------------------------------------------------------------
